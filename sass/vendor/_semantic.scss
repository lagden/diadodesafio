/////////////////
// Semantic.gs // for SCSS: http://sass-lang.com/
/////////////////

// Defaults which you can freely override
$column-width: 64px;
$gutter-width: 20px;
$gutter-half: ($gutter-width / 2);
$columns: 12;

// Utility function â€” you should never need to modify this
@function gridsystem-width($c:$columns) {
    @return ($column-width + $gutter-width) * $c;
}

// Set $total-width to 100% for a fluid layout
$total-width: gridsystem-width($columns);

// Convenience function for calculating the $total-width / $calculated-width.
@function gridsystem-ratio($c:$columns) {
    @if ($total-width == 100%) {
        @return $total-width / gridsystem-width($c);
    } @else {
        @return $total-width / gridsystem-width($columns);
    }
}

//////////
// GRID //
//////////

@mixin row($c:$columns) {
    display: block;
    @if ($total-width == 100%) {
        width: auto;
        @include margins((-.5 * $gutter-width * gridsystem-ratio($c)));
    } @else {
        width: (gridsystem-width($c) * gridsystem-ratio());
        @include margins((-.5 * $gutter-width * gridsystem-ratio()));
    }
    @include clear-floats();
}

@mixin column($x, $c:$columns) {
    display: inline;
    float: left;
    width: ((gridsystem-width($x)-$gutter-width) * gridsystem-ratio($c));
    @include margins((.5 * $gutter-width * gridsystem-ratio($c)));
}

@mixin cell($x, $c:$columns) {
    display: inline;
    float: left;
    width: gridsystem-width($x);
}

@mixin push($offset:1) {
    $marginleft: strip-units((gridsystem-width($offset) - $gutter-width + ($gutter-width*.5)) * gridsystem-ratio());
    @include attr-size('margin-left', $marginleft);
}

@mixin pull($offset:1) {
    $marginright: strip-units((gridsystem-width($offset) - $gutter-width + ($gutter-width*.5)) * gridsystem-ratio());
    @include attr-size('margin-right', $marginright);
}

@mixin margins($v){
    @include attr-size('margin-right', $v);
    @include attr-size('margin-left', $v);
}
